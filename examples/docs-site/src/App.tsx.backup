import { signal, effect } from 'philjs-core';
import { HomePage } from './pages/HomePage';
import { Sidebar } from './components/Sidebar';
import { TableOfContents } from './components/TableOfContents';
import { SearchModal } from './components/SearchModal';
import { Breadcrumbs } from './components/Breadcrumbs';
import { DocNavigation } from './components/DocNavigation';
import { renderMarkdown } from './lib/markdown-renderer';
import { docsStructure } from './lib/docs-structure';
import './styles/global.css';
import 'highlight.js/styles/github-dark.css';

// Client-side routing
const currentPath = signal(window.location.pathname);

window.addEventListener('popstate', () => {
  currentPath.set(window.location.pathname);
});

function navigate(path: string) {
  window.history.pushState({}, '', path);
  currentPath.set(path);
  window.scrollTo(0, 0);
}

export function App() {
  const path = currentPath();
  console.log('[App] Current path:', path);

  // Simple routing
  if (path === '/' || path === '') {
    console.log('[App] Rendering HomePage');
    return <HomePage navigate={navigate} />;
  }

  if (path.startsWith('/docs')) {
    console.log('[App] Rendering DocsViewer');
    return <DocsViewer navigate={navigate} path={path} />;
  }

  console.log('[App] Rendering 404');

  // 404
  return (
    <div style="min-height: 100vh; display: flex; align-items: center; justify-content: center; flex-direction: column; gap: 1rem;">
      <h1 style="font-size: 4rem; font-weight: 700; color: var(--color-text);">404</h1>
      <p style="font-size: 1.25rem; color: var(--color-text-secondary);">Page not found</p>
      <button
        onClick={() => navigate('/')}
        style="
          padding: 0.75rem 1.5rem;
          background: var(--color-brand);
          color: white;
          border: none;
          border-radius: 8px;
          font-weight: 500;
          cursor: pointer;
          transition: all 0.2s;
        "
        onMouseEnter={(e) => (e.target as HTMLElement).style.transform = 'scale(1.05)'}
        onMouseLeave={(e) => (e.target as HTMLElement).style.transform = 'scale(1)'}
      >
        Go Home
      </button>
    </div>
  );
}

function DocsViewer({ navigate, path }: { navigate: (path: string) => void; path: string }) {
  console.log('[DocsViewer] Starting render, path:', path);

  // TEMPORARY: Return simple test content to verify rendering works
  return (
    <div style="padding: 2rem;">
      <h1>DocsViewer Test</h1>
      <p>Path: {path}</p>
      <p>If you can see this, the component renders!</p>
    </div>
  );
}

// Helper function to get first file for a section
function getFirstFileForSection(sectionPath: string): string {
  const section = docsStructure.find(s => s.path === sectionPath);
  return section?.items[0]?.file || 'overview';
}
