bashcat > philjs-prompts/07-fix-docs-site-ui.txt << 'FIXUI'
ultrathink

MISSION: Check and fix the PhilJS documentation site UI at examples/docs-site/

CURRENT ISSUES:
- Documents page is linking to # tags (broken anchors)
- Links pointing to .md files (downloads raw markdown instead of rendering)
- Navigation may not be working correctly

YOUR STRUCTURE:
- Documentation site: examples/docs-site/
- Markdown content: docs/ (symlinked to examples/docs-site/public/md-files)
- Site source: examples/docs-site/src/
- Components: examples/docs-site/src/components/
- Pages: examples/docs-site/src/pages/

═══════════════════════════════════════════════════════════════════════════════
PHASE 1: START THE DOCS SITE AND AUDIT (30-45 min)
═══════════════════════════════════════════════════════════════════════════════

STEP 1.1: Start the Documentation Site
─────────────────────────────────────────────────────
```bash
cd examples/docs-site
npm install  # if needed
npm run dev
□ Note the URL (likely http://localhost:5173 or similar)
□ Open in browser
□ Verify it loads
STEP 1.2: Manual Navigation Audit
─────────────────────────────────────────────────
Open the site and click EVERY link. Record what's broken:
Create: examples/docs-site/BROKEN-LINKS-AUDIT.md
Format:
markdown# Docs Site UI Audit

## Homepage Issues
- Link to "Getting Started" → ?
- Link to "Documentation" → ?
- CTA buttons → ?

## Navigation Bar
- Getting Started link → ?
- Learn link → ?
- API Reference link → ?
- Examples link → ?

## Sidebar Navigation (if exists)
Test every single link:
- Getting Started > Introduction → goes to: _____ (# or .md or /docs/getting-started/introduction)
- Getting Started > Installation → goes to: _____
- Getting Started > Quick Start → goes to: _____
... list ALL sidebar links and where they go

## Documentation Page Content
- Internal links within documentation → ?
- "Next" pagination → ?
- "Previous" pagination → ?
- Table of contents links → ?

## What's the pattern?
Are links:
- [ ] Pointing to # (empty anchors)
- [ ] Pointing to .md files
- [ ] Pointing to wrong routes
- [ ] Other issue: _____
STEP 1.3: Inspect the Code
─────────────────────────────────────────────────
Examine these key files:
□ examples/docs-site/src/pages/DocsPage.tsx

How does it render documentation?
How does it generate links?
How does it load markdown files?

□ examples/docs-site/src/components/Sidebar.tsx

How are sidebar links generated?
What hrefs are being created?

□ examples/docs-site/src/components/DocNavigation.tsx

How are next/prev links created?

□ examples/docs-site/src/data/docs.ts

How is the documentation structure defined?
Are URLs correct here?

□ examples/docs-site/src/lib/docs-structure.ts

How is the docs structure organized?

Record findings in the audit file.
DELIVERABLE:
□ BROKEN-LINKS-AUDIT.md with comprehensive list of all issues
□ Understanding of how the routing works
□ Identified root cause
═══════════════════════════════════════════════════════════════════════════════
PHASE 2: FIX ALL LINKS AND NAVIGATION (60-90 min)
═══════════════════════════════════════════════════════════════════════════════
STEP 2.1: Fix Documentation Structure Definition
─────────────────────────────────────────────────────
Find where the documentation structure is defined (likely src/data/docs.ts or src/lib/docs-structure.ts)
Fix the structure to use proper route paths:
typescript// ❌ WRONG - points to markdown files
const docsStructure = {
  'Getting Started': {
    'Introduction': 'introduction.md',
    'Installation': 'installation.md',
  }
}

// ✅ CORRECT - points to routes
const docsStructure = {
  'Getting Started': {
    'Introduction': '/docs/getting-started/introduction',
    'Installation': '/docs/getting-started/installation',
  }
}

// OR if using slugs:
const docsStructure = {
  'Getting Started': {
    'Introduction': 'getting-started/introduction',
    'Installation': 'getting-started/installation',
  }
}
STEP 2.2: Fix Sidebar Component
─────────────────────────────────────────────────────
Edit: examples/docs-site/src/components/Sidebar.tsx
Ensure links are created correctly:
tsx// Find this pattern and fix it:

// ❌ WRONG
<Link href={item.path}>{item.title}</Link>  // if path is "intro.md"
<a href={`#${item.slug}`}>{item.title}</a>  // empty anchors

// ✅ CORRECT  
<Link href={`/docs/${item.path}`}>{item.title}</Link>
// or if path already has /docs/:
<Link href={item.path}>{item.title}</Link>
STEP 2.3: Fix DocsPage Component
─────────────────────────────────────────────────────
Edit: examples/docs-site/src/pages/DocsPage.tsx
This component needs to:

Take a route like /docs/getting-started/introduction
Map it to the markdown file: docs/getting-started/introduction.md
Load and render that markdown
NOT download the .md file

Check the markdown loading logic:
tsx// Make sure it's doing something like this:

function DocsPage() {
  const location = useLocation(); // or similar
  const path = location.pathname; // e.g., "/docs/getting-started/introduction"
  
  // Convert route to markdown file path
  const mdPath = path.replace('/docs/', ''); // "getting-started/introduction"
  const mdFile = `/md-files/${mdPath}.md`; // "/md-files/getting-started/introduction.md"
  
  // Fetch and render the markdown
  const [content, setContent] = createSignal('');
  
  createEffect(() => {
    fetch(mdFile)
      .then(res => res.text())
      .then(md => {
        const html = marked(md); // or whatever markdown parser you're using
        setContent(html);
      });
  });
  
  return <div innerHTML={content()} />;
}
STEP 2.4: Fix Router Configuration
─────────────────────────────────────────────────────
Check the router setup (probably in src/App.tsx or src/main.tsx)
Ensure there's a route that catches all /docs/* paths:
tsx// Should have something like:
<Route path="/docs/*" component={DocsPage} />

// Or more specific routes:
<Route path="/docs/:section/:page" component={DocsPage} />
STEP 2.5: Fix In-Content Links
─────────────────────────────────────────────────────
If markdown files have internal links to other docs, fix them:
Search through docs/ for problematic links:
bashcd docs
grep -r "\.md)" . | head -20  # find markdown links
grep -r "href=" . | head -20   # find any href links
In markdown files, fix links:
markdown<!-- ❌ WRONG -->
[See Components](components.md)
[Learn more](#)

<!-- ✅ CORRECT -->
[See Components](/docs/learn/components)
[Learn more](/docs/getting-started/introduction)
STEP 2.6: Fix Navigation Component (Next/Prev)
─────────────────────────────────────────────────────
Edit: examples/docs-site/src/components/DocNavigation.tsx
Ensure next/previous links are correct:
tsx// ❌ WRONG
<Link href={`${nextPage}.md`}>Next</Link>

// ✅ CORRECT
<Link href={`/docs/${nextPage}`}>Next</Link>
STEP 2.7: Fix Table of Contents
─────────────────────────────────────────────────────
Edit: examples/docs-site/src/components/TableOfContents.tsx
Ensure TOC links work (should be anchor links on same page):
tsx// ✅ CORRECT for on-page anchors
<a href="#introduction">Introduction</a>
<a href="#installation">Installation</a>

// These should scroll to headings with matching IDs on the current page
DELIVERABLE:
□ All link generation code fixed
□ Sidebar links work
□ DocsPage properly loads and renders markdown
□ Navigation works
□ FIXES-APPLIED.md - log of all changes
═══════════════════════════════════════════════════════════════════════════════
PHASE 3: TEST EVERYTHING (30-45 min)
═══════════════════════════════════════════════════════════════════════════════
STEP 3.1: Manual Click-Through
─────────────────────────────────────────────────────
With dev server running, test systematically:
□ Click every sidebar link
□ Verify each page loads and displays markdown content
□ Click every next/previous link
□ Click links within documentation content
□ Test table of contents links
□ Test navigation bar links
□ Test homepage links
Create a checklist and mark each as working ✅ or broken ❌
STEP 3.2: Automated Link Checker
─────────────────────────────────────────────────────
Create: examples/docs-site/scripts/check-links.ts
typescriptimport { readdir, readFile } from 'fs/promises';
import { join } from 'path';

async function checkLinks() {
  const docsDir = join(process.cwd(), '../../docs');
  const issues: string[] = [];
  
  async function scanDir(dir: string) {
    const entries = await readdir(dir, { withFileTypes: true });
    
    for (const entry of entries) {
      const fullPath = join(dir, entry.name);
      
      if (entry.isDirectory()) {
        await scanDir(fullPath);
      } else if (entry.name.endsWith('.md')) {
        const content = await readFile(fullPath, 'utf-8');
        
        // Check for .md links
        const mdLinks = content.match(/\[.*?\]\(.*?\.md\)/g);
        if (mdLinks) {
          issues.push(`${fullPath}: Contains .md links: ${mdLinks.join(', ')}`);
        }
        
        // Check for empty anchors
        const emptyAnchors = content.match(/\[.*?\]\(#\)/g);
        if (emptyAnchors) {
          issues.push(`${fullPath}: Contains empty # links: ${emptyAnchors.join(', ')}`);
        }
      }
    }
  }
  
  await scanDir(docsDir);
  
  if (issues.length > 0) {
    console.error('❌ Found issues:');
    issues.forEach(issue => console.error(issue));
    process.exit(1);
  }
  
  console.log('✅ All links look good!');
}

checkLinks();
Run it:
bashnpx tsx examples/docs-site/scripts/check-links.ts
STEP 3.3: Browser Console Check
─────────────────────────────────────────────────────
□ Open browser console (F12)
□ Navigate through docs site
□ Check for:

404 errors (files not found)
JavaScript errors
Console warnings
□ Fix any issues found

STEP 3.4: Build Test
─────────────────────────────────────────────────────
bashcd examples/docs-site
npm run build
npm run preview
□ Test the production build
□ Verify all links still work
□ Check for build errors
STEP 3.5: Create Verification Report
─────────────────────────────────────────────────────
Create: examples/docs-site/UI-VERIFICATION-REPORT.md
markdown# Docs Site UI Verification Report

## Issues Found and Fixed

### Before:
- Sidebar links pointed to .md files → 127 instances
- Navigation used # anchors → 23 instances  
- DocsPage wasn't loading markdown → broken
- Routes weren't configured → 404 errors

### After:
- All links point to proper routes ✅
- Markdown renders correctly ✅
- All navigation works ✅
- No 404 errors ✅

## Manual Testing Results

Tested all sections:
- ✅ Getting Started (8 pages) - all links work
- ✅ Learn (25 pages) - all links work
- ✅ Routing (16 pages) - all links work
- ✅ Data Fetching (13 pages) - all links work
- ✅ Forms (11 pages) - all links work
- ✅ Styling (10 pages) - all links work
- ✅ Performance (15 pages) - all links work
- ✅ Advanced (25 pages) - all links work
- ✅ API Reference (10 pages) - all links work
- ✅ Best Practices (13 pages) - all links work
- ✅ Migration Guides (3 pages) - all links work
- ✅ Troubleshooting (8 pages) - all links work

Total: 157 pages tested ✅

## Navigation Testing
- ✅ Sidebar navigation works
- ✅ Next/Previous navigation works
- ✅ Table of contents works
- ✅ In-content links work
- ✅ Breadcrumbs work (if implemented)

## Build Status
- ✅ Development build works
- ✅ Production build works
- ✅ No console errors
- ✅ No 404s

## Performance
- Initial load: ___ms
- Navigation between pages: ___ms
- Markdown rendering: ___ms

## Status: ✅ FULLY WORKING

The documentation site UI is now fully functional with:
- All links working correctly
- All pages rendering properly
- All navigation functional
- Production build verified
DELIVERABLE:
□ Everything manually tested and working
□ Automated link checker passing
□ Production build verified
□ UI-VERIFICATION-REPORT.md created
═══════════════════════════════════════════════════════════════════════════════
COMMON FIXES FOR YOUR STRUCTURE
═══════════════════════════════════════════════════════════════════════════════
Fix Pattern 1: Update docs structure definition
typescript// In src/data/docs.ts or src/lib/docs-structure.ts
export const docsStructure = {
  'getting-started': {
    title: 'Getting Started',
    pages: [
      { slug: 'introduction', title: 'Introduction' },
      { slug: 'installation', title: 'Installation' },
      { slug: 'quick-start', title: 'Quick Start' },
    ]
  },
  // ... rest
};

// Generate proper URLs:
function getDocUrl(section: string, slug: string) {
  return `/docs/${section}/${slug}`;
}
Fix Pattern 2: Load markdown correctly
typescript// In DocsPage.tsx
async function loadMarkdown(section: string, page: string) {
  const response = await fetch(`/md-files/${section}/${page}.md`);
  const markdown = await response.text();
  return marked(markdown);
}
Fix Pattern 3: Render with proper routing
tsx// In App.tsx or router setup
<Router>
  <Route path="/" component={HomePage} />
  <Route path="/docs/:section/:page" component={DocsPage} />
  <Route path="/playground" component={PlaygroundPage} />
</Router>
═══════════════════════════════════════════════════════════════════════════════
START NOW
═══════════════════════════════════════════════════════════════════════════════
Begin Phase 1: Start the docs site, click through everything, and create comprehensive audit.
Then fix everything in Phase 2.
Then verify everything in Phase 3.
When complete, the documentation site should be fully functional with all links working.
GO.
FIXUI

Now run it:
```bash
cd ~/path/to/your/philjs  # your main philjs directory
claude --dangerously-skip-permissions
Then:
Read philjs-prompts/07-fix-docs-site-ui.txt and execute all phases. Fix the documentation site so all links work and markdown renders properly.
This will systematically check your docs site, find all the broken links, fix them, and verify everything works. It's tailored specifically to your file structure with the docs-site in examples/ and the markdown content symlinked from the root docs/ directory.